#!/bin/sh

# Uncomment to enable debug messages
#handle_common_flags "foo" 0 2

# Helper functions
###################

# This function is copied from
# https://github.com/ko1nksm/readlinkf/blob/a1112ce3ff6be50da8f45abe6667e0e4be7d9bb8/readlinkf.sh#L40
readlinkf_readlink() {
  [ "${1:-}" ] || return 1
  max_symlinks=40
  CDPATH='' # to avoid changing to an unexpected directory

  target=$1
  [ -e "${target%/}" ] || target=${1%"${1##*[!/]}"} # trim trailing slashes
  [ -d "${target:-/}" ] && target="$target/"

  cd -P . 2>/dev/null || return 1
  while [ "$max_symlinks" -ge 0 ] && max_symlinks=$((max_symlinks - 1)); do
    if [ ! "$target" = "${target%/*}" ]; then
      case $target in
        /*) cd -P "${target%/*}/" 2>/dev/null || break ;;
        *) cd -P "./${target%/*}" 2>/dev/null || break ;;
      esac
      target=${target##*/}
    fi

    if [ ! -L "$target" ]; then
      target="${PWD%/}${target:+/}${target}"
      printf '%s\n' "${target:-/}"
      return 0
    fi

    target=$(readlink -- "$target" 2>/dev/null) || break
  done
  return 1
}

# Helper functions to determin which commands and apps are available

script_succeeds(){
  $VERBOSE "Check if '$1' exists and returns success..."
  [ -s "$1" ] && source "$1"
}

cmd_is_found(){
  $VERBOSE "Check if command '$1' is found..."
  [ -x "$(command -v "$1" 2>/dev/null)" ]
}

app_is_found() { return 1; }

if cmd_is_found mdfind; then
  # Checks if input is a bundle identifier of an installed MacOS app
  $VERBOSE "...Found mdfind command"
  app_is_found() {
    $VERBOSE "Check if app '$1' is found..."
    [ $(mdfind -count "kMDItemCFBundleIdentifier == '$1'" 2>/dev/null) -ne 0 ]
  }
fi

# Figure out what gets installed
#################################

IS_FOUND_SH_NAME=is_found.sh

actual_rcrc_file="$RCRC"

if [ "$RCRC" = "$HOME/.rcrc" ]; then
  actual_rcrc_file=$(readlinkf_readlink "$RCRC")
fi

rcrc_dir=$(dirname -- "$actual_rcrc_file")

dotfiles_base_dir="$(cd -- "$rcrc_dir/.." && echo "$PWD")"

# Get OS info from uname in ALL CAPS
uname="$(uname -s | tr '[:lower:]' '[:upper:]')"

if [ "$uname" = 'DARWIN' ]; then
  os_type='bsd'
  os_name='macos'
  os_version="$(sw_vers -productVersion | sed -E 's/([0-9]+\.[0-9]+).*/\1/')"
  os_name_version="$os_name$os_version"
elif [ "$uname" = 'FREEBSD' ]; then
  os_type='bsd'
  os_name='freebsd'
elif [ "$uname" = 'LINUX' ]; then
  os_type='linux'
  if [ -s '/etc/os-release' ]; then
    os_name="$(grep '^ID=' /etc/os-release | sed -e 's/.*="\?\([^"]*\)"\?/\1/' | tr '[:upper:]' '[:lower:]')"
    os_version="$(grep '^VERSION_ID=' /etc/os-release | sed -e 's/.*="\?\([^"]*\)"\?/\1/' | tr '[:upper:]' '[:lower:]')"
    os_name_version="$os_name$os_version"
  fi
fi

for dir in $dotfiles_base_dir/*; do
  name=$(basename -- "$dir")
  { [ -d "$dir" ] && [ ! "common" = "$name" ]; } || continue

  $DEBUG "Checking $name ($dir) is found..."

  if cmd_is_found "$name" || app_is_found "$name" || script_succeeds "$dir/$IS_FOUND_SH_NAME" ; then
    app_cmd_dotfiles_dirs="$app_cmd_dotfiles_dirs $dir"
    $DEBUG "...Found $name (app_cmd_dotfiles_dirs=$app_cmd_dotfiles_dirs)"
  fi
done;

# Set the RCM variables to setup the install
#############################################

DOTFILES_DIRS="$app_cmd_dotfiles_dirs $dotfiles_base_dir/common"
TAGS="$os_name_version $os_name $os_type"
UNDOTTED="bin Library"
EXCLUDES="*.md $IS_FOUND_SH_NAME"

